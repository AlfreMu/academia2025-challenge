name: Deploy to VM (Swarm via ngrok)

on:
  workflow_dispatch: {}
  push:
    tags: ['v*.*.*']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Opcional) Muestra a quÃ© host/puerto va a conectar
      - name: Print target
        run: |
          echo "SSH_HOST=${{ secrets.SSH_HOST }}"
          echo "SSH_PORT=${{ secrets.SSH_PORT }}"
          echo "SSH_USER=${{ secrets.SSH_USER }}"

      # Deploy por SSH (usa tus secrets con ngrok)
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1          
        with:
          host: ${{ secrets.SSH_HOST }}        
          port: ${{ secrets.SSH_PORT }}        
          username: ${{ secrets.SSH_USER }}    
          key: ${{ secrets.SSH_PRIVATE_KEY }}  
          debug: true
          timeout: "60s"
          command_timeout: "2m"
          script: |
            set -euxo pipefail

            STACK_NAME="academiachallenge"
            WORKDIR="$HOME/academia2025-challenge"
            COMPOSE_FILE="docker-compose.prod.yml"

            mkdir -p "$WORKDIR"
            cd "$WORKDIR"

            # Traer el compose desde main
            curl -fsSL -o "$COMPOSE_FILE" \
              "https://raw.githubusercontent.com/${{ github.repository }}/main/$COMPOSE_FILE"

            # Secret de DB (idempotente)
            echo -n 'postgres' | docker secret create db_password - 2>/dev/null || true

            # Deploy / rolling update
            docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"

            # Estado
            docker stack services "$STACK_NAME"
            docker service ps "${STACK_NAME}_api"
